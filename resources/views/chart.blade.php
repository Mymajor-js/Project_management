<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥</title>
    <link rel="stylesheet" href="../css/chart.css" />
    <link rel="stylesheet" href="{{ asset('css/loginshow.css') }}">
    <link rel="stylesheet" href="../css/scroobar.css">

    <!-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Import Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <link rel="icon" href="{{ asset('img/iconx2.png') }}" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

    <style>

    </style>

</head>

<body>
    @if(Auth::check() && Auth::user()->name)
    @if (Auth::check() && Auth::user()->level === 'admin')

    <div class="center">
        <div class="container mt-4">
            <div class="gb">
                @if (session('success'))
                <div class="alert alert-success">
                    {{ session('success') }}
                </div>
                @endif
                <h2 class="text-center fixed-header">‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥</h2>

                <div class="text-end mb-3 fixed-button">
                    <button class="btn btn-primary" onclick="toggleView()">‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á</button>
                    <a href="{{ route('alldata')}}" class="btn btn-success">‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</a>
                    <a href="../map" class="btn btn-info">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà</a>
                </div>

                <form id="searchForm" class="search-form text-center">
                    <input type="text" id="searchInput" class="search-input form-control d-inline-block w-25"
                        placeholder="üîç ‡∏û‡∏¥‡∏°‡∏û‡πå ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ">
                    <button type="submit" class="btn btn-primary">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</button>
                </form>

                <div id="graphView" class="graph-container">
                    <div class="conx">
                        <canvas id="myChart"></canvas>
                    </div>
                    <div class="conx">
                        <canvas id="myCharttow"></canvas>
                    </div>
                    <div class="conx" style="display: none;">
                        <!-- ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô -->
                        <canvas id="myChartview"></canvas> <!-- ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ -->
                    </div>

                </div>
            </div>
        </div>

        @else
        <div class="login-alert">
            <h2>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
            <a href="{{route('login')}}" class="btn btn-primary">Go To Login</a>
        </div>
        @endif
        @endif
    </div>
    <script>
    const markers = @json($markers);

    if (markers && markers.length > 0) {
        let yearCount = {};

        markers.forEach(marker => {
            let year = marker.year_money; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ year_money ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if (year) {
                yearCount[year] = (yearCount[year] || 0) + 1;
            }
        });

        let labels = Object.keys(yearCount);
        let data = Object.values(yearCount);
        const maxValue = Math.max(...data, 5); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î +2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏î

        if (labels.length > 0) {
            const ctx = document.getElementById('myChart').getContext('2d');

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ctx ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
            if (ctx) {
                new Chart(ctx, {
                    type: 'line', // ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ö‡∏ö line
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ',
                            data: data,
                            backgroundColor: 'rgba(255, 255, 255, 0)', // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≤‡∏ü
                            borderColor: '#ffc82a', // ‡∏™‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
                            borderWidth: 2,
                            fill: true
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                min: 0,
                                max: maxValue + 2 // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
                            }
                        }
                    }
                });
            } else {
                console.error("Canvas context not found");
            }
        } else {
            console.warn("No valid data for chart.");
        }

        if (labels.length > 0) {
            const ctx = document.getElementById('myCharttow').getContext('2d');

            function getRandomColor() {
                return `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)`;
            }

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ
            const originalLabels = [...labels]; // ‡πÄ‡∏Å‡πá‡∏ö labels ‡πÄ‡∏î‡∏¥‡∏°
            const originalData = [...data]; // ‡πÄ‡∏Å‡πá‡∏ö data ‡πÄ‡∏î‡∏¥‡∏°
            const backgroundColorSet = originalLabels.map(() => getRandomColor());

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
            let hiddenYears = new Set();
            let myChart; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î myChart ‡πÑ‡∏ß‡πâ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å

            function updateChart() {
                if (!myChart) return; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ myChart ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

                let filteredLabels = [];
                let filteredData = [];
                let filteredColors = [];

                originalLabels.forEach((year, index) => {
                    if (!hiddenYears.has(year)) { // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
                        filteredLabels.push(year);
                        filteredData.push(originalData[index]);
                        filteredColors.push(backgroundColorSet[index]);
                    }
                });

                myChart.data.labels = filteredLabels;
                myChart.data.datasets[0].data = filteredData;
                myChart.data.datasets[0].backgroundColor = filteredColors;
                myChart.update();
            }

            if (ctx) {
                myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: originalLabels,
                        datasets: [{
                            label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ',
                            data: originalData,
                            backgroundColor: backgroundColorSet,
                            borderWidth: 0 // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                min: 0,
                                max: Math.max(...originalData) + 2
                            }
                        },
                        plugins: {
                            legend: {
                                display: true,
                                labels: {
                                    generateLabels: function(chart) {
                                        return originalLabels.map((label, i) => ({
                                            text: `‡∏õ‡∏µ ${label}`,
                                            fillStyle: backgroundColorSet[i],
                                            hidden: hiddenYears.has(label),
                                            index: i
                                        }));
                                    }
                                },
                                onClick: function(e, legendItem) {
                                    const year = originalLabels[legendItem.index];

                                    if (hiddenYears.has(year)) {
                                        hiddenYears.delete(year); // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
                                    } else {
                                        hiddenYears.add(year); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏µ‡∏ô‡∏±‡πâ‡∏ô
                                    }

                                    updateChart(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
                                }
                            }
                        }
                    }
                });
            } else {
                console.error("Canvas context not found");
            }
        }


    } else {
        console.error("Markers data is empty or undefined");
    }

    document.getElementById('searchForm').addEventListener('submit', function(event) {
        event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà

        let searchQuery = document.getElementById('searchInput').value.trim();
        if (!searchQuery) return; // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

        let searchField = null;
        if (searchQuery.includes("‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")) {
            searchField = "province";
        } else if (searchQuery.includes("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠")) {
            searchField = "district";
        } else if (searchQuery.includes("‡∏ï‡∏≥‡∏ö‡∏•")) {
            searchField = "subdistrict";
        } else if (searchQuery.includes("‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")) {
            searchField = "Nactivity";
        } else if (searchQuery.includes("‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô")) {
            searchField = "mauban";
        } else if (searchQuery.includes("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")) {
            searchField = "arear_money";
        } else if (searchQuery.includes("‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")) {
            searchField = "year_money";
        } else if (searchQuery.includes("‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")) {
            searchField = "my_name";
        } else if (searchQuery.includes("status")) {
            searchField = "status";
        }

        if (!searchField) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ï‡∏≥‡∏ö‡∏• ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
            return;
        }

        let filteredData = {};
        markers.forEach(marker => {
            let key = marker[searchField];
            if (key) {
                filteredData[key] = (filteredData[key] || 0) + 1;
            }
        });

        let labels = Object.keys(filteredData);
        let data = Object.values(filteredData);

        if (labels.length === 0) {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤");
            return;
        }

        // üî• ‡∏ã‡πà‡∏≠‡∏ô myChart ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á myChartview
        document.getElementById('myChartview').parentElement.style.display = 'block';

        // üî• ‡∏•‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (window.myChartview instanceof Chart) {
            window.myChartview.destroy();
        }


        // üü¢ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const groupedData = {};
        const yearsSet = new Set();
        markers.forEach(({ province, year_money }) => {
            if (province && year_money) { // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ "" ‡∏≠‡∏≠‡∏Å
                if (!groupedData[province]) {
                    groupedData[province] = {};
                }
                groupedData[province][year_money] = (groupedData[province][year_money] || 0) + 1;
                yearsSet.add(year_money);
            }
        });

        // üü¢ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ labels -> provinceLabels
        const provinceLabels = Object.keys(groupedData); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        const years = [...yearsSet].sort(); // ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const datasets = years.map((year, index) => {
            return {
                label: `‡∏õ‡∏µ ${year}`,
                data: provinceLabels.map(province => groupedData[province][year] || 0),
                backgroundColor: `hsl(${index * 100}, 70%, 50%)`, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
                borderColor: 'rgba(0, 0, 0, 0.1)',
                borderWidth: 1
            };
        });

        // üî• ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡∏°‡πà
        const ctx = document.getElementById('myChartview').getContext('2d');
        window.myChartview = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: provinceLabels, // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                datasets: datasets // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏µ`
                    },
                    legend: {
                        position: 'top'
                    }
                },
                scales: {
                    x: {
                        stacked: false // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                    },
                    y: {
                        beginAtZero: true,
                        stacked: false, // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

    });


    </script>

</body>

</html>