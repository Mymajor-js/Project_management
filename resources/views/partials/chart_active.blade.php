
<div class="row tm-content-row">
    <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
    <div class="tm-bg-primary-dark tm-block xweh">
        <h2 class="tm-block-title">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ</h2>
        <center><canvas id="yearChart" style="display: block; box-sizing: border-box; height: 350px; width: 350px;"></canvas></center>
    </div>
</div>
<div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
    <div class="tm-bg-primary-dark tm-block xweh">
        <h2 class="tm-block-title">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</h2>
        <canvas id="provinceChart"></canvas>
    <div class="heip"></div>

    </div>
</div>


<div class="col-sm-12 col-md-12 col-lg-12 col-xl-12 tm-block-col" >
    <div class="tm-bg-primary-dark tm-block"style="height: 500px; padding-bottom:15px;">
        <h2 class="tm-block-title">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</h2>
        <center><canvas id="districtChart" style="width: 100%; height: 350px;"></canvas></center>
    </div>
</div>

<div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
    <div class="tm-bg-primary-dark tm-block">
        <h2 class="tm-block-title">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡∏ö‡∏•</h2>
        <canvas id="subdistrictChart"></canvas>
    </div>
</div>

<div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
    <div class="tm-bg-primary-dark tm-block">
        <h2 class="tm-block-title">‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</h2>
        
        <canvas id="arear_moneyChart"></canvas>
    </div>
</div>

</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<script>
// ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const provinceData = @json($chartProvince);
const provinceLabels = provinceData.map(item => item.province || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î');
const provinceCounts = provinceData.map(item => item.total);
const provinceColors = provinceData.map(() => getRandomColor());

const yearData = @json($chartYear);
const yearLabels = yearData.map(item => item.year_money || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏µ');
const yearCounts = yearData.map(item => item.total);
const yearColors = yearData.map(() => getRandomColor());

const districtData = @json($chartDistrict);
const districttCounts = districtData.map(item => item.total);
const districtLabelsx = [
  '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏†‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', '‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™', '‡πÅ‡∏Å‡πâ‡∏á‡∏Ñ‡∏£‡πâ‡∏≠',
  '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á', '‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≤‡∏£', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ß‡πâ‡∏≤',
  '‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå', '‡∏ö‡∏≥‡πÄ‡∏´‡∏ô‡πá‡∏à‡∏ì‡∏£‡∏á‡∏Ñ‡πå', '‡πÄ‡∏ó‡∏û‡∏™‡∏ñ‡∏¥‡∏ï', '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ó‡πà‡∏ô',
  '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏£‡∏∞‡πÄ‡∏´‡∏ß', '‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏ä‡∏∏‡∏°‡∏û‡∏•', '‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏á‡πà‡∏≤', '‡∏ã‡∏±‡∏ö‡πÉ‡∏´‡∏ç‡πà', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
];


const rawData = @json($chartArear_money).map(item => ({
    ...item,
    arear_money: item.arear_money ?? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
}));

// ‡πÅ‡∏¢‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const years = Array.from(new Set(rawData.map(item => item.year_money)));
const sources = Array.from(new Set(rawData.map(item => item.arear_money)));

// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° datasets ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
const datasets_arear = sources
    .filter(source => source !== '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') // üî¥ ‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏¥‡πâ‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    .map(source => {
        const dataForSource = years.map(year => {
            const match = rawData.find(item => item.year_money === year && item.arear_money === source);
            return match ? match.total : null; // ‚ùå ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á 0 ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ
        });

        const hasData = dataForSource.some(v => v !== null);
        if (!hasData) return null;

        return {
            label: source,
            data: dataForSource,
            backgroundColor: getRandomColor(0.6),
            borderColor: 'white',
            borderWidth: 1,
            datalabels: {
                anchor: 'end',
                align: 'start',
                color: 'white',
                font: { weight: 'bold' }
            }
        };
    })
    .filter(Boolean); // ‚úÖ ‡∏ï‡∏±‡∏î null ‡∏≠‡∏≠‡∏Å


const arearCountMap = rawData.reduce((acc, item) => {
    const key = item.arear_money ?? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    acc[key] = (acc[key] || 0) + 1;
    return acc;
}, {});
const filteredCounts = Object.entries(arearCountMap)
    .filter(([key]) => key !== '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
    .map(([, count]) => count);

// ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ count ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞ + 2
const suggestedMax1 = Math.max(...Object.values(arearCountMap), 0) + 1;



function getColorByDistrict(district) {
    const colors = {
        '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥': 'rgba(255, 99, 132, 0.7)',
        '‡∏†‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß': 'rgba(54, 162, 235, 0.7)',
        '‡∏à‡∏±‡∏ï‡∏∏‡∏£‡∏±‡∏™': 'rgba(255, 206, 86, 0.7)',
        '‡πÅ‡∏Å‡πâ‡∏á‡∏Ñ‡∏£‡πâ‡∏≠': 'rgba(75, 192, 192, 0.7)',
        '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå': 'rgba(153, 102, 255, 0.7)',
        '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡πÅ‡∏î‡∏á': 'rgba(255, 159, 64, 0.7)',
        '‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≤‡∏£': 'rgba(199, 199, 199, 0.7)',
        '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Ç‡∏ß‡πâ‡∏≤': 'rgba(255, 99, 255, 0.7)',
        '‡∏Ñ‡∏≠‡∏ô‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå': 'rgba(100, 255, 218, 0.7)',
        '‡∏ö‡∏≥‡πÄ‡∏´‡∏ô‡πá‡∏à‡∏ì‡∏£‡∏á‡∏Ñ‡πå': 'rgba(160, 100, 255, 0.7)',
        '‡πÄ‡∏ó‡∏û‡∏™‡∏ñ‡∏¥‡∏ï': 'rgba(255, 205, 86, 0.7)',
        '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ó‡πà‡∏ô': 'rgba(54, 162, 100, 0.7)',
        '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏£‡∏∞‡πÄ‡∏´‡∏ß': 'rgba(255, 99, 71, 0.7)',
        '‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏ä‡∏∏‡∏°‡∏û‡∏•': 'rgba(135, 206, 250, 0.7)',
        '‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏á‡πà‡∏≤': 'rgba(210, 180, 140, 0.7)',
        '‡∏ã‡∏±‡∏ö‡πÉ‡∏´‡∏ç‡πà': 'rgba(0, 191, 255, 0.7)',
        '‡∏≠‡∏∑‡πà‡∏ô‡πÜ': 'rgba(169, 169, 169, 0.7)'
    };
    return colors[district] || 'rgba(200, 200, 200, 0.7)';
}

let scatterPoints = [];
districtData.forEach(item => {
    const count = item.total || 0;
    const label = item.district || '‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
    const color = getColorByDistrict(label);

    for (let i = 0; i < count; i++) {
        scatterPoints.push({
            x: label,
            y: Math.random() * 10, // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤ y ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0‚Äì10 (‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô)
            backgroundColor: color
        });
    }
});

const subdistrictData = @json($chartSubdistrict);
const subdistrictLabels = subdistrictData.map(item => item.subdistrict || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡∏ö‡∏•');
const subdistrictCounts = subdistrictData.map(item => item.total);
const subdistrictColors = subdistrictData.map(() => getRandomColor());

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏™‡∏µ
function getRandomColor(opacity = 0.6) {
    const r = Math.floor(Math.random() * 256);
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return `rgba(${r}, ${g}, ${b}, ${opacity})`;
}
// ‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
const datasets = provinceLabels.map((province, i) => ({
    label: province,
    data: [provinceCounts[i]], // ‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô array ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞ dataset = 1 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    backgroundColor: provinceColors[i],
    borderColor: 'rgba(255, 255, 255, 0.8)',
    borderWidth: 1
}));

const subdatasetsdistrict = subdistrictLabels.map((subdistrict, i) => ({
    label: subdistrict,
    data: [subdistrictCounts[i]],
    backgroundColor: subdistrictColors[i],
    borderColor: 'rgba(255, 255, 255, 0.8)',
    borderWidth: 1
}));

new Chart(document.getElementById('districtChart'), {
    type: 'scatter',
    data: {
        datasets: [{
            label: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≥‡πÄ‡∏†‡∏≠', // ‚úÖ ‡πÅ‡∏Å‡πâ undefined
            data: scatterPoints,
            parsing: false,
            pointBackgroundColor: scatterPoints.map(p => p.backgroundColor),
            pointBorderColor: 'white',
            pointRadius: 5,
            showLine: false
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                labels: { color: 'white' }
            },
        },
        scales: {
            x: {
                type: 'category',
                labels: districtLabelsx,
                title: {
                    display: true,
                    text: '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠',
                    color: 'white'
                },
                ticks: {
                    color: 'white',
                    autoSkip: false,
                    maxRotation: 90,
                    minRotation: 45
                },
                grid: {
                    color: 'rgba(255,255,255,0.5)'
                }
            },
            y: {
                beginAtZero: true,
                suggestedMax: Math.max(...scatterPoints.map(p => p.y)) + 1,
                title: {
                    display: true,
                    text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏∏‡∏Å)',
                    color: 'white'
                },
                ticks: {
                    color: 'white'
                },
                grid: {
                    color: 'rgba(255,255,255,0.5)'
                }
            }
        }
    }
});

new Chart(document.getElementById('subdistrictChart'), {
    type: 'pie',
    data: {
        labels: subdistrictLabels, // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•
        datasets: [{
            label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
            data: subdistrictCounts, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡∏ö‡∏•
            backgroundColor: subdistrictColors,
            borderColor: 'white',
            borderWidth: 2
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'right',
                labels: {
                    color: 'white'
                }
            },
            title: {
                display: true,
                text: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡∏ö‡∏•',
                color: 'white'
            },
            datalabels: {
                color: 'white',
                font: {
                    weight: 'bold',
                    size: 12
                },
                formatter: (value, context) => {
                    const label = context.chart.data.labels[context.dataIndex];
                    return `${label}: ${value}`;
                }
            }
        }
    },
    plugins: [ChartDataLabels]
});

new Chart(document.getElementById('arear_moneyChart'), {
    type: 'bar',
    data: {
        labels: years,
        datasets: datasets_arear
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'top',
                labels: {
                    color: 'white'
                }
            },
            title: {
                display: true,
                text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì',
                color: 'white'
            },
            datalabels: {
                // default config if not overridden
                color: 'white',
                anchor: 'end',
                align: 'top',
                font: { weight: 'bold' }
            }
        },
        scales: {
            x: {
                ticks: { color: 'white' },
                grid: { color: 'rgba(255,255,255,0.1)' }
            },
            y: {
                suggestedMax: suggestedMax1,
                beginAtZero: true,
                ticks: {
                    color: 'white',
                    stepSize: 1
                },
                grid: { color: 'rgba(255,255,255,0.1)' },
                title: {
                    display: true,
                    text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
                    color: 'white'
                }
            }
        }
    },
    plugins: [ChartDataLabels]
});

new Chart(document.getElementById('provinceChart'), {
    type: 'bar',
    data: {
        labels: ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£'], // ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô X
        datasets: datasets // ‚úÖ ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô dataset
    },
    options: {
        responsive: true,
        plugins: {
            datalabels: {
                color: 'white',
                anchor: 'center',
                align: 'center',
                font: {
                    weight: 'bold',
                    size: 10
                },
                formatter: (value, context) => {
                    return context.dataset.label; // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                }
            },
            legend: {
                labels: {
                    color: 'white'
                },
                position: 'top'
            },
            title: {
            }
        },
        scales: {
            x: {
                ticks: {
                    color: 'white'
                },
                grid: {
                    color: 'rgba(255,255,255,0.1)'
                }
            },
            y: {
                beginAtZero: true,
                suggestedMax: Math.max(...provinceCounts) + 1,
                ticks: {
                    color: 'white'
                },
                grid: {
                    color: 'rgba(255,255,255,0.1)'
                }
            }
        }
    },
    plugins: [ChartDataLabels] // ‚úÖ ‡πÉ‡∏™‡πà plugin ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
});

new Chart(document.getElementById('yearChart'), {
    type: 'doughnut',
    data: {
        labels: yearLabels,
        datasets: [{
            label: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£',
            data: yearCounts,
            backgroundColor: yearColors
        }]
    },
    options: {
        cutout: '40%',
        responsive: false,
        plugins: {
            legend: {
                labels: {
                    color: 'white'
                },
                position: 'top'
            },
            title: {
                display: true,
            },
            datalabels: {
                color: 'white',
                formatter: (value, context) => {
                    const label = context.chart.data.labels[context.dataIndex];
                    return `‡∏õ‡∏µ ${label}\n(${value})`; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ + ‡∏Ñ‡πà‡∏≤
                },
                font: {
                    weight: 'bold',
                    size: 12
                }
            }
        }
    },
    plugins: [ChartDataLabels]
});
</script>